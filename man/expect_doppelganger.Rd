% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/testthat-ui.R
\name{expect_doppelganger}
\alias{expect_doppelganger}
\title{Does a figure look like its expected output?}
\usage{
expect_doppelganger(title, fig, path = NULL, ..., verbose = NULL,
  writer = write_svg)
}
\arguments{
\item{title}{A brief description of what is being tested in the
figure. For instance: "Points and lines overlap".

If a ggplot2 figure doesn't have a title already, \code{title} is
applied to the figure with \code{ggtitle()}.

The title is also used as file name for storing SVG (in a
sanitzed form, with special characters converted to \code{"-"}).}

\item{fig}{A figure to test.}

\item{path}{The path where the test case should be stored, relative
to the \code{tests/figs/} folder. If \code{NULL} (the default), the current
testthat context is used to create a subfolder. Supply an empty
string \code{""} if you want the figures to be stored in the root
folder.}

\item{...}{Additional arguments passed to \code{\link[testthat:compare]{testthat::compare()}} to
control specifics of comparison.}

\item{verbose}{Soft-deprecated. See the debugging section.}

\item{writer}{A function that takes the plot, a target SVG file,
and an optional plot title. It should transform the plot to SVG
in a deterministic way and write it to the target file. See
\code{\link[=write_svg]{write_svg()}} (the default) for an example.}
}
\description{
If the test has never been validated yet, the test is skipped. If
the test has previously been validated but \code{fig} does not look
like its expected output, an error is issued. Use
\code{\link[=validate_cases]{validate_cases()}} or \code{\link[=manage_cases]{manage_cases()}} to (re)validate
the test.
}
\details{
\code{fig} can be a ggplot object, a recordedplot, a function to be
called, or more generally any object with a \code{print} method.
}
\section{Debugging}{


It is sometimes difficult to understand the cause of a failure.
This usually indicates that the plot is not created
deterministically. Potential culprits are:
\itemize{
\item Some of the plot components depend on random variation. Try
setting a seed.
\item The plot depends on some system library. For instance sf plots
depend on libraries like GEOS and GDAL. It might not be possible
to test these plots with vdiffr (which can still be used for
manual inspection, add a \code{\link[testthat:skip]{testthat::skip()}} before the
\code{expect_doppelganger()} call in that case).
}

To help you understand the causes of a failure, vdiffr
automatically logs the SVG diff of all failures when run under R
CMD check. The log is located in \code{tests/vdiffr.Rout.fail} and
should be displayed on Travis.

You can also set the \code{VDIFFR_LOG_PATH} environment variable with
\code{Sys.setenv()} to unconditionally (also interactively) log failures
in the file pointed by the variable.
}

\examples{
if (FALSE) {  # Not run

library("ggplot2")

test_that("plots have known output", {
  disp_hist_base <- function() hist(mtcars$disp)
  expect_doppelganger("disp-histogram-base", disp_hist_base)

  disp_hist_ggplot <- ggplot(mtcars, aes(disp)) + geom_histogram()
  expect_doppelganger("disp-histogram-ggplot", disp_hist_ggplot)
})

}
}
