% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/testthat-ui.R
\name{expect_doppelganger}
\alias{expect_doppelganger}
\title{Does a figure look like its expected output?}
\usage{
expect_doppelganger(title, fig, path = NULL, ..., verbose = FALSE,
  writer = write_svg)
}
\arguments{
\item{title}{A brief description of what is being tested in the
figure. For instance: "Points and lines overlap".

If a ggplot2 figure doesn't have a title already, \code{title} is
applied to the figure with \code{ggtitle()}.

The title is also used as file name for storing SVG (in a
sanitzed form, with special characters converted to \code{"-"}).}

\item{fig}{A figure to test.}

\item{path}{The path where the test case should be stored, relative
to the \code{tests/figs/} folder. If \code{NULL} (the default), the current
testthat context is used to create a subfolder. Supply an empty
string \code{""} if you want the figures to be stored in the root
folder.}

\item{...}{Additional arguments passed to \code{\link[testthat:compare]{testthat::compare()}} to
control specifics of comparison.}

\item{verbose}{If \code{TRUE}, the contents of the SVG files for the
comparison plots are printed during testthat checks. This is
useful to investigate errors when testing remotely.

Note that it is not possible to print the original SVG during
interactive use. This is because there is no way of figuring out
in which directory this SVG lives. Consequently, only the test
case is printed.}

\item{writer}{A function that takes the plot, a target SVG file,
and an optional plot title. It should transform the plot to SVG
in a deterministic way and write it to the target file. See
\code{\link[=write_svg]{write_svg()}} (the default) for an example.}
}
\description{
If the test has never been validated yet, the test is skipped. If
the test has previously been validated but \code{fig} does not look
like its expected output, an error is issued. Use
\code{\link[=validate_cases]{validate_cases()}} or \code{\link[=manage_cases]{manage_cases()}} to (re)validate
the test.
}
\details{
\code{fig} can be a ggplot object, a recordedplot, a function to be
called, or more generally any object with a \code{print} method. If a
ggplot object, a dependency for ggplot2 is automatically added (see
\code{\link[=add_dependency]{add_dependency()}}.
}
\examples{
if (FALSE) {  # Not run

library("ggplot2")

test_that("plots have known output", {
  disp_hist_base <- function() hist(mtcars$disp)
  expect_doppelganger("disp-histogram-base", disp_hist_base)

  disp_hist_ggplot <- ggplot(mtcars, aes(disp)) + geom_histogram()
  expect_doppelganger("disp-histogram-ggplot", disp_hist_ggplot)
})

}
}
